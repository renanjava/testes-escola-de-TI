// Generated by Qodo Gen

import type { IUserRequest } from '../../interfaces/user-request.interface'
import { UserController } from '../../user.controller'

describe('UserController', () => {
  it('should return user data when valid JWT token is provided', async () => {
    const mockUser = { id: 1, name: 'Test User', email: 'test@example.com' }
    const mockRequest = { user: { sub: '1' } }

    const mockFindOneUserUseCase = {
      execute: jest.fn().mockResolvedValue(mockUser),
    }

    const mockUserUseCasesFactory = {
      getFindOneUserUseCaseInstance: jest
        .fn()
        .mockReturnValue(mockFindOneUserUseCase),
    }

    const userController = new UserController(mockUserUseCasesFactory as any)

    const result = await userController.findOne(
      mockRequest as unknown as IUserRequest,
    )

    expect(
      mockUserUseCasesFactory.getFindOneUserUseCaseInstance,
    ).toHaveBeenCalled()
    expect(mockFindOneUserUseCase.execute).toHaveBeenCalledWith('1')
    expect(result).toEqual(mockUser)
  })

  it('should handle non-existent user IDs from JWT token', async () => {
    const mockRequest = { user: { sub: '999' } }

    const mockFindOneUserUseCase = {
      execute: jest.fn().mockRejectedValue(new Error('User not found')),
    }

    const mockUserUseCasesFactory = {
      getFindOneUserUseCaseInstance: jest
        .fn()
        .mockReturnValue(mockFindOneUserUseCase),
    }

    const userController = new UserController(mockUserUseCasesFactory as any)

    await expect(
      userController.findOne(mockRequest as unknown as IUserRequest),
    ).rejects.toThrow('User not found')

    expect(
      mockUserUseCasesFactory.getFindOneUserUseCaseInstance,
    ).toHaveBeenCalled()
    expect(mockFindOneUserUseCase.execute).toHaveBeenCalledWith('999')
  })
})
